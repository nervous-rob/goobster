name: Build and Deploy to Azure Container Apps

on:
  # Automatically trigger it when detected changes in repo
  push:
    branches: [ main ]
    paths:
    - '**'
    - '.github/workflows/main.yml'

  # Allow manual trigger 
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
  # Note: DISCORD_GUILD_IDS should be a JSON array in the GitHub secret
  # Example format in the secret: ["123456789", "987654321"]
  DISCORD_GUILD_IDS: ${{ secrets.DISCORD_GUILD_IDS }}
  DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
  AZURE_REGION: eastus
  AZURE_SQL_USER: ${{ secrets.AZURE_SQL_USER }}
  AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}
  AZURE_SQL_DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
  AZURE_SQL_SERVER: ${{ secrets.AZURE_SQL_SERVER }}
  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
  REPLICATE_API_KEY: ${{ secrets.REPLICATE_API_KEY }}
  PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
  DEFAULT_PROMPT: ${{ secrets.DEFAULT_PROMPT }}
  SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
  SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev  # Specify the environment where secrets are stored

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Update changelog before building the container
      - name: Setup Node.js for changelog
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Update changelog
        run: |
          echo "Updating changelog from git history..."
          chmod +x ./scripts/rebuild-changelog.js
          node ./scripts/rebuild-changelog.js
          
          # Verify changelog was created successfully
          if [ -f "changelog.md" ]; then
            echo "Changelog updated successfully. Size: $(stat -c%s changelog.md) bytes"
            echo "First 10 lines:"
            head -n 10 changelog.md
          else
            echo "Warning: Changelog file not found after generation attempt!"
            echo "# Changelog" > changelog.md
            echo "" >> changelog.md
            echo "## $(date +%Y-%m-%d)" >> changelog.md
            echo "" >> changelog.md
            echo "### Added" >> changelog.md
            echo "- Initial version" >> changelog.md
            echo "" >> changelog.md
            echo "Created a basic changelog as fallback."
          fi

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CAGOOBSTER_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.CAGOOBSTER_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.CAGOOBSTER_AZURE_SUBSCRIPTION_ID }}

      # Create config.json before Docker build
      - name: Create config.json
        run: |
          # Verify Replicate API key is available
          if [ -z "$REPLICATE_API_KEY" ]; then
            echo "::error::REPLICATE_API_KEY is not set in GitHub secrets or is empty"
            exit 1
          else
            echo "REPLICATE_API_KEY is available (length: ${#REPLICATE_API_KEY})"
          fi
          
          cat > config.json << EOF
          {
            "clientId": "$DISCORD_CLIENT_ID",
            "guildIds": $DISCORD_GUILD_IDS,
            "token": "$DISCORD_BOT_TOKEN",
            "openaiKey": "$OPENAI_API_KEY",
            "anthropicKey": "$ANTHROPIC_API_KEY",
            "googleAIKey": "$GEMINI_API_KEY",
            "spotify": {
              "clientId": "$SPOTIFY_CLIENT_ID",
              "clientSecret": "$SPOTIFY_CLIENT_SECRET"
            },
            "azure": {
              "speech": {
                "key": "$AZURE_SPEECH_KEY",
                "region": "$AZURE_REGION",
                "language": "en-US"
              },
              "sql": {
                "user": "$AZURE_SQL_USER",
                "password": "$AZURE_SQL_PASSWORD",
                "database": "$AZURE_SQL_DATABASE",
                "server": "$AZURE_SQL_SERVER",
                "options": {
                  "encrypt": true,
                  "trustServerCertificate": false
                }
              },
              "storage": {
                "connectionString": "$AZURE_STORAGE_CONNECTION_STRING"
              }
            },
            "audio": {
              "music": {
                "volume": 1.0,
                "crossfadeDuration": 3000,
                "loopFadeStart": 5000
              }
            },
            "replicate": {
              "apiKey": "$REPLICATE_API_KEY",
              "models": {
                "musicgen": {
                  "version": "671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb",
                  "defaults": {
                    "model_version": "stereo-large",
                    "duration": 30,
                    "temperature": 1.0,
                    "top_k": 250,
                    "top_p": 0.95,
                    "classifier_free_guidance": 3.0
                  }
                }
              }
            },
            "perplexity": {
              "apiKey": "$PERPLEXITY_API_KEY"
            },
            "perplexityKey": "$PERPLEXITY_API_KEY",
            "DEFAULT_PROMPT": "$DEFAULT_PROMPT"
          }
          EOF
          
          # Validate JSON format and verify replicate API key is included
          echo "Validating config.json..."
          if jq -e '.replicate.apiKey' config.json > /dev/null; then 
            echo "âœ… replicate.apiKey is present in config.json"
            # Redact the key for security while showing it exists
            jq '.replicate.apiKey = (if .replicate.apiKey == "" then "EMPTY" else "API_KEY_SET" end)' config.json
          else
            echo "::error::replicate.apiKey is missing or null in the generated config.json"
            cat config.json | jq
            exit 1
          fi

      - name: Update container app configuration
        run: |
          # Make sure containerapp extension is up to date
          az extension add --name containerapp --upgrade
          
          # Set Azure CLI timeout config
          echo "Setting longer Azure CLI timeout..."
          az config set core.http_network_timeout=300
          
          # Implement retry logic with 5-minute cooldown
          MAX_RETRIES=3
          RETRY_COUNT=0
          COOLDOWN_PERIOD=300 # 5 minutes in seconds
          
          echo "Retrieving environment ID with retry logic..."
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $(($RETRY_COUNT+1)) of $MAX_RETRIES..."
            
            # Try to get environment ID
            ENVIRONMENT_ID=$(az containerapp env show -g rg-sharedresources-dev -n ca-env-goobster --query id -o tsv)
            
            # Check if we got a valid ID
            if [ -n "$ENVIRONMENT_ID" ]; then
              echo "Successfully retrieved environment ID: $ENVIRONMENT_ID"
              break
            fi
            
            # Increment retry counter
            RETRY_COUNT=$(($RETRY_COUNT+1))
            
            # If we haven't reached max retries, wait before trying again
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retry failed. Waiting for $COOLDOWN_PERIOD seconds before next attempt..."
              sleep $COOLDOWN_PERIOD
            else
              echo "All retry attempts failed. Falling back to constructed ID."
            fi
          done
          
          # If environment ID is still empty, construct it manually
          if [ -z "$ENVIRONMENT_ID" ]; then
            echo "Using alternative approach to construct environment ID..."
            SUBSCRIPTION_ID=$(az account show --query id -o tsv)
            ENVIRONMENT_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/rg-sharedresources-dev/providers/Microsoft.App/managedEnvironments/ca-env-goobster"
            echo "Using constructed environment ID: $ENVIRONMENT_ID"
          fi
          
          # Export as GitHub environment variable for subsequent steps
          echo "ENVIRONMENT_ID=$ENVIRONMENT_ID" >> $GITHUB_ENV
          
          # Replace tags in containerapp.yaml
          sed -i "s/\${IMAGE_TAG}/${{ github.sha }}/g" containerapp.yaml
          sed -i "s|\${ENVIRONMENT_ID}|$ENVIRONMENT_ID|g" containerapp.yaml
          
          # Display final configuration for debugging
          echo "Final containerapp.yaml configuration:"
          cat containerapp.yaml
          
          # Validate YAML format (if yq is available)
          if command -v yq &> /dev/null; then
            echo "Validating YAML format..."
            yq eval . containerapp.yaml
          fi

      - name: Build and push container image to registry
        id: deploy
        continue-on-error: true
        run: |
          # Try direct build approach first
          echo "Building Docker image directly..."
          docker build -t nervouslabsdev.azurecr.io/ca-goobster:${{ github.sha }} .
          
          # Login to ACR
          echo "Logging in to Azure Container Registry..."
          docker login nervouslabsdev.azurecr.io -u ${{ secrets.CAGOOBSTER_REGISTRY_USERNAME }} -p ${{ secrets.CAGOOBSTER_REGISTRY_PASSWORD }}
          
          # Push image
          echo "Pushing image to registry..."
          docker push nervouslabsdev.azurecr.io/ca-goobster:${{ github.sha }}
          
          # Deploy with az CLI directly - only update, never create
          echo "Updating container app using az CLI..."
          az containerapp update \
            --name ca-goobster \
            --resource-group rg-sharedresources-dev \
            --image nervouslabsdev.azurecr.io/ca-goobster:${{ github.sha }} \
            || echo "Direct update failed, will try alternative approaches"

      # Retry deployment using az container app update directly
      - name: Retry deployment if needed
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "First deployment attempt failed. Implementing 5-minute cooldown..."
          sleep 300
          
          echo "Retrying update with simplified command..."
          az containerapp update \
            --name ca-goobster \
            --resource-group rg-sharedresources-dev \
            --image nervouslabsdev.azurecr.io/ca-goobster:${{ github.sha }} \
            --registry-server nervouslabsdev.azurecr.io \
            --registry-username ${{ secrets.CAGOOBSTER_REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.CAGOOBSTER_REGISTRY_PASSWORD }} \
            || echo "Container app update failed again. Waiting for another 5 minutes before restarting app..."
          
          # Second cooldown period if update fails
          if [ $? -ne 0 ]; then
            echo "Waiting for another 5 minutes before attempting restart..."
            sleep 300
          fi
          
          # Try restarting the app
          echo "Attempting to restart the container app..."
          az containerapp restart \
            --name ca-goobster \
            --resource-group rg-sharedresources-dev \
            || echo "Container app restart failed."

      # Fallback manual deployment if needed
      - name: Fallback deployment info
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "All automatic update attempts failed. Please update manually."
          echo "Environment ID: $ENVIRONMENT_ID"
          echo "Image Name: nervouslabsdev.azurecr.io/ca-goobster:${{ github.sha }}"
          echo "Manual update steps:"
          echo "1. Navigate to the Azure Portal"
          echo "2. Go to Container Apps"
          echo "3. Find the 'ca-goobster' app"
          echo "4. Click on 'Revisions'"
          echo "5. Click 'Create new revision'"
          echo "6. Update the image to: nervouslabsdev.azurecr.io/ca-goobster:${{ github.sha }}"
          echo "7. Click 'Create'" 